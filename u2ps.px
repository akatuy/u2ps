#!/usr/bin/perl

# u2ps, text to postscript converter with unicode support
# Copyright (C) 2008-2014  Alex Suykov <alex.suykov@gmail.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

BEGIN {
our $BASE = '.';
our $GS = "gs";
};

our $BASE;
our $verbose;

use utf8;
use strict;
use Encode qw(decode encode_utf8 resolve_alias);
use lib "$BASE/pl";
use Getopt::LongTable;
require 'opts.pl';
require 'term.pl';
require 'util.pl';

# Splitting this all into individual variables makes strict reports
# much more useful, but unfortunately import lists in each modules
# become way too long.

# Global/misc options, as well as things that affect both terminal state and ps output
my $sysenc = guess_system_encoding() || 'utf8';
our %opts = (
	'tenc' => $sysenc,		# text encoding
	'oenc' => $sysenc,		# options encoding (--title, --header-* etc)

	'nfonts' => 0,			# do not embed fonts
	'afonts' => 0,			# embed all fonts, including standard PostScript 35

	'lscape' => 0,			# landscape orientation
	'sline' => 1,			# first line
);

# Postscript page parameters
our %page = (
	'pw' => 595,	# paper width/height (the numbers to go to BoundingBox)
	'ph' => 842,
	'ew' => 595,	# width/height in terminal orientation; matches pw/ph in portrait mode
	'eh' => 842,
	'mt' => 55,	# margins around the terminal area
	'mb' => 55,	# (with settings like this, it will be exactly 80x60 window at 12pt)
	'ml' => 57.5,
	'mr' => 57.5,

	'fset' => 'FreeMono',		# text font set
	'fsize' => 12,			# text font size, pt
	'afset' => 'Times-Roman',	# aux font set (headers/footers)
	'asize' => 10,			# aux font size
	'lfont' => 'Times-Roman',	# line numbers font
	'lsize' => 10,			# line numbers font size
);

# Virtual terminal parameters
our %term = (
	'cols' => 0,		# characters per line
	'lines' => 0,		# soft lines per page
	# do not set default cols/lines here! see termsize()

	'tabstop' => 8,		# spaces per tab
);

our @inc = ( );		# Ghostscript -I and -d resp
our @def = ( );


# input:
#	start
#	abcdefghijklmnopqrst
#
#   h s lines       wrap
#       +----------+
#   1 1 | start    |       
#   1 2 | abcdefgh |w      
#   1 3 | ijklmnop |w      
#   2 4 | qrst     |       
#       |          |
#       `~~~~~~~~~~'
#
# 2 hard lines, 4 soft lines

handle_options();

my $fileinp = shift or die "Input file name required\n";
my $fileout = shift;
$fileinp = '' if $fileinp eq '-';
die "Output file name must be specified when reading stdin\n" if $fileinp eq '' and !defined($fileout);
$fileout = resuffix($fileinp, '.txt', '.ps') if !defined($fileout);

# Set up files. Note u2ps writes directly to the output file,
# stats and renaming will be handled completely in psfrem.
open(FILE, "<", $fileinp) or die "Can't open $fileinp: $!\n" unless $fileinp eq '';
open(FILE, '<&', 'STDIN') or die "Can't dup stdin: $!\n" if $fileinp eq '';
open(PAGE, ">", $fileout) or die "Can't open $fileout: $!\n";
binmode(PAGE, ":utf8"); select(PAGE);

# "Main loop", parse input and write output
warn "Generating code\n" if $verbose;
new_file();
print_line(decode($opts{tenc}, $_, Encode::FB_DEFAULT)) while(<FILE>);
end_file();

close(PAGE); close(FILE);

# Now unless we've been told to do otherwise, run post-processor
# to embed fonts and resources.
exit(0) if $opts{nopp};

my @psfrem = ("$BASE/psfrem.px", "-I$BASE/ps");
push(@psfrem, '-r') unless $opts{nfonts};
push(@psfrem, '-k') if $opts{keep};
push(@psfrem, '-A') if $opts{afonts};
push(@psfrem, map { "-I$_" } @inc) if @inc;
push(@psfrem, map { "-d$_" } @def) if @def;
push(@psfrem, '--', $fileout);
warn "Running ".join(" ", @psfrem)."\n" if $verbose;
exec(@psfrem);
die("Can't exec $psfrem[0]: $!\n");
