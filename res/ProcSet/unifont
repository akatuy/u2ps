%!PS-Adobe-3.0 Resource-ProcSet
%%EndComments

20 dict begin

% (utf-8-string) ushow -
/ushow {
	currentfont exch					% font
	deutf { 						% font c
		ushow.findglyph {				% font c /glyph
			ushow.printglyph			% font
		} {						% font c
			ushow.substitute
		} ifelse
	} forall						% font
	pop
} def

% (utf-8-string) ustringwidth w 0
/ustringwidth {
currentfontset begin
	0 exch deutf { 
		ushow.findglyph {
			.glyphwidth pop
		} {
			ushow.substwidth
		} ifelse add
	} forall 0.0
end
} def

% (utf8-string) -> [ codepoint codepoint ... codepoint ]
%
% in case of malformed string, codepoint -1 is inserted where
% parser failed to interpret data.
/deutf {
	mark exch 0 exch { {		% expect c
		% continuation byte
		dup 2#11000000 and 2#10000000 eq {
			% check whether we're in the middle
			% of sequence
			1 index 0 gt {
				% ok, add this to the last codepoint
				2#00111111 and
				3 2 roll 6 bitshift or
				exch 1 sub
			} {
				% nope, malformed string
				pop -1 0
			} ifelse
			exit
		} if

		% non-continuation byte while we're in the middle
		% of sequence
		1 index 0 ne { pop -1 0 exit } if

		% 0-, 1-, ..., 5-seq. starting bytes
		dup 2#10000000 and 2#00000000 eq { exch exit } if
		dup 2#11100000 and 2#11000000 eq { 2#00011111 and exch pop 1 exit } if
		dup 2#11110000 and 2#11100000 eq { 2#00001111 and exch pop 2 exit } if
		dup 2#11111000 and 2#11110000 eq { 2#00000111 and exch pop 3 exit } if
		dup 2#11111100 and 2#11111000 eq { 2#00000011 and exch pop 4 exit } if
		dup 2#11111110 and 2#11111100 eq { 2#00000001 and exch pop 5 exit } if
		% ignored code -- should not happen, but anyway
		pop exit
	} loop } forall
	% check for incomplete string
	0 ne { -1 } if
	counttomark array astore exch pop
} def

% Find glyph name for codepoint $uni in current font.
%
% uni -> uni /glyphname true
% uni -> uni false
%
% What this actually does is making a list of possible names,
% say, [ /uni0020 /space /spacehackarabic ], and then tries
% each of them against currentfont's CharStrings.

/ushow.findglyph {
	currentfont /CharStrings get false			% uni CS F

	[ 3 index ushow.uniname					% uni CS F [ un
	  LGA 5 index .knownget {				% uni CS F [ un nns
		dup type /arraytype eq { aload pop } if		% uni CS F [ un n n ...
	  } if
	] {							% uni CS F name
		2 index 1 index known {				% uni CS F name
			exch pop true exit
		} {
			pop
		} ifelse
	} forall						% uni CS name? TF

	{ exch pop true } { pop false } ifelse
} def

% Fallback glyph name, for characters not in AGL: /uni(code),
% with (code) = %04X the actual unicode value.
% Sadly this is only a fallback option, since fonts are not required
% to define these names for all characters, and more often than not
% have /a but not /uni0061.
%
% 16#431 -> /uni0431

/ushow.uniname {
	16 10 string cvrs					% (431)
	dup length 4 exch sub					% (431) 1
	dup 0 gt { 4 } { 1 index length } ifelse
	4 add string						% (431) 1 (--------)
	dup 0 (/uni) putinterval				% (431) 1 (/uni----)
	1 index 0 gt {						% (431) 1 (/uni----) 1
		1 index
		4 exch 1 exch 3 add {
			1 index exch (0) putinterval
		} for
	} if							% (431) 1 (/uni0---)
	dup 4 1 roll 3 1 roll					% (/uni0---) (/uni0---) (431) 1
	dup 0 gt { 4 add } { pop 4 } ifelse
	exch putinterval
} def


% Show the glyph *and* do stats if necessary.
%
% code /glyph ->

/ushow.printglyph {
	glyphshow pop	% TODO stats
} def

% Well $code is not in currentfont, so got to pull notdef
% and print a substitution char instead.
%
% code ->

/ushow.notdef 10 dict def

/ushow.substitute {
	gsave

	currentfont /ScaleMatrix get 0 get
	dup ushow.notdef exch .knownget {
		setfont pop
	} {
		dup /notdef findfont exch scalefont dup setfont
		ushow.notdef 3 1 roll put
	} ifelse

	ushow.findsubst glyphshow
	currentpoint grestore moveto
} def



% Is a combining character?
% Used to reset width, see doc/utf.txt for explaination. This a dirty workaround.
%	codepoint -> t|f
/uiscombining { {
	dup dup 16#0300 ge exch 16#036F le and { true exit } if
	dup dup 16#20D0 ge exch 16#20EF le and { true exit } if
	dup dup 16#0483 ge exch 16#0489 le and { true exit } if
	dup dup 16#0591 ge exch 16#05A1 le and { true exit } if
	usubst.table 1 index .knownget { /.notdefc eq } { false } ifelse exit
} loop exch pop } def

% Substitution glyph name. Glyphs are taken from /notdef font in case requested
% code point was not found anywhere in the fontset.
% 	codepoint -> /glyphname
/ushow.findsubst { {
	% big well-defined sets
	dup 16#0020 lt { /.notdefx exit } if
	dup 16#FFFF gt { /.notdefz exit } if
	dup dup 16#0300 ge exch 16#036F le and { /.notdefc exit } if
	dup dup 16#20D0 ge exch 16#20EF le and { /.notdefc exit } if
	dup dup 16#2E80 ge exch 16#4DB5 le and { /.notdefw exit } if
	dup dup 16#4E00 ge exch 16#9FC3 le and { /.notdefw exit } if
	dup dup 16#A000 ge exch 16#A4C6 le and { /.notdefw exit } if
	% exclude special cases
	dup usubst.table exch .knownget { exit } if
	% smaller cases
	dup dup 16#0483 ge exch 16#0489 le and { /.notdefc exit } if		% cyrillic combining marks
	dup dup 16#0591 ge exch 16#05A1 le and { /.notdefc exit } if		% hebrew u
	dup dup 16#05A2 ge exch 16#05BD le and { /.notdefl exit } if
	dup dup 16#1DC1 ge exch 16#1DCA le and { /.notdefl exit } if
	dup dup 16#FE00 ge exch 16#FE0F le and { /.notdefx exit } if		% variation selectors (?)
	dup dup 16#FFE0 ge exch 16#FFE6 le and { /.notdefw exit } if		% fullwidth currency
	/.notdef exit
} loop exch pop } def

% glyphs from /notdef font, special cases which do not fit usubstitute ranges
/usubst.table <<
	16#02DD /.notdefo
	16#02DE /.notdefo
	16#02DF /.notdefo
	16#02E0 /.notdefo
	16#02E2 /.notdefo
	16#02E3 /.notdefo
	16#02E4 /.notdefo
	16#02E5 /.notdefo

	% hebrew
	16#0591	/.notdefl
	16#0596	/.notdefl
	16#059A	/.notdefl
	16#059B	/.notdefl
	16#05A8 /.notdefc
	16#05A9 /.notdefc
	16#05AB /.notdefc
	16#05AC /.notdefc
	16#05AE /.notdefc
	16#05AF /.notdefc
	16#05B9 /.notdefc
	16#05BA /.notdefc
	16#05BF /.notdefc
	16#05C1 /.notdefc
	16#05C2 /.notdefc
	16#05C4 /.notdefc
	16#05C5 /.notdefl
	16#05C7 /.notdefl

	16#0483 /.notdefc
	16#0484 /.notdefc
	16#0485 /.notdefc
	16#0486 /.notdefc
	16#0488 /.notdefo
	16#0489 /.notdefo

	% katakana-hiragana combining voice marks
	16#3099 /.notdefc
	16#309A /.notdefc

	% combining ligatures
	16#FE20 /.notdefc
	16#FE21 /.notdefc
	16#FE22 /.notdefc
	16#FE23 /.notdefc

	16#FFFF /.notdefx
	16#FFFE /.notdefx

	16#1DFE /.notdefc
	16#1DFF /.notdefc

	16#0E31 /.notdefc
	16#0E34 /.notdefc
	16#0E35 /.notdefc
	16#0E36 /.notdefc
	16#0E37 /.notdefc
	16#0E38 /.notdefc
	16#0E39 /.notdefc
	16#0E3A /.notdefc
	16#0E47 /.notdefc
	16#0E48 /.notdefc
	16#0E49 /.notdefc
	16#0E4A /.notdefc
	16#0E4B /.notdefc
	16#0E4C /.notdefc
	16#0E4D /.notdefc
	16#0E4E /.notdefc
>> def

% Inherent character width, used for substitution with spaces
%	codepoint uwidth emwidth
% Note this is last-resort fallback, in case /notdef was not loaded.
% Generally /notdef* glyphs are used instead of spaces.
/uwidth {
	usubstitute uwidth.table exch get
} def

/uwidth.table <<
	/.notdefc 0			% combining
	/.notdefl 0			% low combining
	/.notdefx 0			% control
	/.notdefz 0			% weird
	/.notdef 1			% normal/half-width
	/.notdefw 2			% wide
>> def


% --- compatibility definitions ------------------------------------------------

% Prevent error on interpreters lacking .glyphwidth
% Of course, this will produce awfully incorrect results,
% but *good* replacement would be too complicated.
/.glyphwidth dup where {
	pop pop
} {
	{ pop (M) stringwidth } bind def
} ifelse

% Same for dicttomark, apparently missing from some Level 2 interpreters
% 	mark ... dicttomark
% is equivalent to
%	<< ... >>
% but I feel bad about doing stuff like "<< exch" even if it works.
/.dicttomark dup where {
	pop pop
} {
	{ counttomark 2 idiv dup dict begin { def } repeat pop currentdict end } def
} ifelse

% Ghostscript-specific but pretty handy routine
%	dict key -> value true
%	dict key -> false
/.knownget dup where {
	pop pop
} {
	{ 1 index 1 index known not { pop pop false } { get true } ifelse } def
} ifelse

currentdict end /unifont exch /ProcSet defineresource pop
